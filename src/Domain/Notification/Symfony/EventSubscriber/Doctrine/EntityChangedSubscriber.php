<?php

declare(strict_types=1);

namespace App\Domain\Notification\Symfony\EventSubscriber\Doctrine;

use App\Domain\Notification\Model\Notification;
use App\Domain\Registry\Model\ConformiteOrganisation\Evaluation;
use App\Domain\Registry\Model\Contractor;
use App\Domain\Registry\Model\Mesurement;
use App\Domain\Registry\Model\Proof;
use App\Domain\Registry\Model\Treatment;
use App\Domain\Registry\Model\Violation;
use App\Domain\User\Repository\User as UserRepository;
use App\Infrastructure\ORM\Notification\Repository\Notification as NotificationRepository;
use Doctrine\Common\EventSubscriber;
use Doctrine\Common\Persistence\Event\LifecycleEventArgs;
use Doctrine\ORM\Events;
use Symfony\Component\Serializer\SerializerInterface;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * This subscriber handles events that are generated by doctrine, and creates notifications from them if necessary
 */
class EntityChangedSubscriber implements EventSubscriber
{
    protected array $classes = [
        Treatment::class,
        Mesurement::class,
        Violation::class,
        Proof::class,
        Contractor::class,
    ];

    protected array $modules = [
        Treatment::class => "treatment",
        Mesurement::class => "action",
        Violation::class => "violation",
        Proof::class => "proof",
        Contractor::class => "contractor",
    ];

    protected NotificationRepository $notificationRepository;
    protected SerializerInterface $serializer;
    protected UserRepository $userRepository;
    protected TranslatorInterface $translator;

    public function __construct(
        NotificationRepository $notificationRepository,
        SerializerInterface $serializer,
        UserRepository $userRepository,
        TranslatorInterface $translator
    )
    {
        $this->notificationRepository = $notificationRepository;
        $this->serializer = $serializer;
        $this->userRepository = $userRepository;
        $this->translator = $translator;
    }

    public function getSubscribedEvents(): array
    {
        return [
            Events::prePersist,
            Events::preRemove,
            Events::preUpdate,
        ];
    }

    public function prePersist(LifecycleEventArgs $args): void
    {
        $object = $args->getObject();
        $class = get_class($object);
        if (!in_array($class, $this->classes)) {
            return;
        }

        $notification = new Notification();
        $mod = $this->modules[$class];
        $notification->setModule("notification.modules." . $mod);
        $notification->setCollectivity($object->getCollectivity());
        $notification->setName("notification.actions.create");
        $notification->setObject($this->serializer->normalize($object, 'array', [
            'circular_reference_handler' => function($o) {return $o->getId();}
        ]));
        $this->notificationRepository->insert($notification);

        // TODO send email to responsable de traitement
    }

    public function preRemove(LifecycleEventArgs $args): void
    {
        $object = $args->getObject();
        $class = get_class($object);
        if (!in_array($class, $this->classes)) {
            return;
        }

        $notification = new Notification();
        $mod = $this->modules[$class];
        $notification->setModule("notification.modules." . $mod);
        $notification->setCollectivity($object->getCollectivity());
        $notification->setName("notification.actions.delete");
        $notification->setObject($this->serializer->normalize($object, 'array', [
            'circular_reference_handler' => function($o) {return $o->getId();}
        ]));
        $this->notificationRepository->insert($notification);
    }

    public function preUpdate(LifecycleEventArgs $args): void
    {
        $object = $args->getObject();
        $class = get_class($object);
        if (!in_array($class, $this->classes)) {
            return;
        }

        $notification = new Notification();
        $mod = $this->modules[$class];
        $notification->setModule("notification.modules." . $mod);
        $notification->setCollectivity($object->getCollectivity());
        $notification->setName("notification.actions.update");
        $notification->setObject($this->serializer->normalize($object, 'array', [
            'circular_reference_handler' => function($o) {return $o->getId();}
        ]));
        $this->notificationRepository->insert($notification);
    }
}
